name: 🔐 Batepapo Microservice - CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Destino do deploy'
        required: false
        default: 'production'
        type: choice
        options: [staging, production]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SERVICE_NAME: batepapo
  TZ: America/Sao_Paulo

# Least-privilege defaults; jobs can narrow/extend as needed
permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: true

jobs:
  test-runner:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    name: 🧪 Test Self-hosted Runner
    steps:
      - uses: actions/checkout@v4
      - name: "Guard: forbid r2dbc:h2 outside tests"
        run: |
          set -euo pipefail
          FOUND=$(grep -R --line-number --include='*.yml' --include='*.properties' --include='*.yaml' "r2dbc:h2" src || true)
          if echo "$FOUND" | grep -v "src/test/" | grep -q "r2dbc:h2"; then
            echo "Forbidden r2dbc:h2 reference outside src/test" >&2
            echo "$FOUND" | grep -v "src/test/" >&2 || true
            exit 1
          fi
      - name: Test runner connectivity
        run: |
          echo "🎉 Self-hosted runner está funcionando!"
          echo "🏃 Runner: $(hostname)"
          echo "📅 Data: $(date)"
          echo "👤 Usuário: $(whoami)"
          echo "📁 Diretório: $(pwd)"
          echo "🔍 Java version:"
          java -version || echo "Java não encontrado"
          echo "🐳 Docker version:"
          docker --version || echo "Docker não encontrado"

  build-and-test:
    needs: test-runner
    runs-on: ubuntu-latest
    timeout-minutes: 30
    name: 🏗️ Build and Test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: maven
      - name: Verify Maven wrapper
        run: |
          chmod +x ./mvnw
          ./mvnw --version
      # DESABILITADO: Testes devido incompatibilidade Java 24 com Mockito
      # - name: Run unit tests with coverage
      #   run: ./mvnw clean verify -Dspring.profiles.active=test
      # DESABILITADO: JaCoCo devido incompatibilidade Java 24 com Mockito  
      # - name: Upload JaCoCo coverage reports
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: jacoco-coverage-reports
      #     path: |
      #       target/site/jacoco/
      #       target/site/jacoco/jacoco.xml
      #     retention-days: 30
      # TEMPORARIAMENTE DESABILITADO: Snyk SAST com problema de JAVA_HOME em container Docker
      # TODO: Reabilitar após correção do ambiente Java no container Snyk
      # - name: Run Snyk SAST security scan
      #   uses: snyk/actions/maven@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     args: |
      #       --all-projects 
      #       --severity-threshold=high 
      #       --fail-on=all 
      #       --project-name=batepapo-service
      # - name: Monitor with Snyk (main branch only)
      #   if: github.ref == 'refs/heads/main'
      #   uses: snyk/actions/maven@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     command: monitor
      #     args: --project-name=batepapo-service
      - name: Build application (skip tests)
        run: ./mvnw clean package -DskipTests
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: batepapo-microservice-jar
          path: target/*.jar
          retention-days: 7

  build-image:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    name: 🐳 Build Docker Image
    needs: build-and-test
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-name-lower: ${{ steps.image_name.outputs.image_name_lower }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Fetch Key Vault secrets (build args)
        id: kv
        shell: bash
        run: |
          set -euo pipefail
          VAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          if [[ "$VAULT_ENDPOINT" =~ https://([^.]+)\.vault\.azure\.net ]]; then
            VAULT="${BASH_REMATCH[1]}"
          else
            echo "ERROR: Invalid AZURE_KEYVAULT_ENDPOINT format: $VAULT_ENDPOINT" >&2
            exit 1
          fi
          map_kv() { echo "$1" | tr '[:lower:]' '[:upper:]' | tr '-' '_'; }
          fetch() {
            local name="$1"; local var="$(map_kv "$name")"; 
            val=$(az keyvault secret show --vault-name "$VAULT" --name "$name" --query value -o tsv 2>/dev/null || true)
            if [ -n "$val" ]; then echo "$var<<__EOF__" >> $GITHUB_ENV; echo "$val" >> $GITHUB_ENV; echo "__EOF__" >> $GITHUB_ENV; fi
          }
          secrets=(
            conexao-de-sorte-database-url
            conexao-de-sorte-database-jdbc-url
            conexao-de-sorte-database-r2dbc-url
            conexao-de-sorte-database-username
            conexao-de-sorte-database-password
            conexao-de-sorte-redis-host
            conexao-de-sorte-redis-port
            conexao-de-sorte-redis-password
            conexao-de-sorte-redis-database
            conexao-de-sorte-jwt-issuer
            conexao-de-sorte-jwt-jwks-uri
          )
          for s in "${secrets[@]}"; do fetch "$s"; done
      - name: Compute lowercase image name
        id: image_name
        run: |
          set -euo pipefail
          REPO='${{ env.IMAGE_NAME }}'
          echo "image_name_lower=$(echo "$REPO" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.image_name_lower }}
          tags: |
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY-MM-DD-HHmmss'}}-{{sha}},enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Batepapo Microservice
            org.opencontainers.image.description=Real-time Chat Microservice
            org.opencontainers.image.service=${{ env.SERVICE_NAME }}
      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          # Nunca faz push em PRs (tokens de fork não têm packages:write)
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true
          provenance: mode=max
          cache-from: type=gha
          cache-to: type=gha,mode=max
          network: host
          build-args: |
            CONEXAO_DE_SORTE_DATABASE_URL=${{ env.CONEXAO_DE_SORTE_DATABASE_URL }}
            CONEXAO_DE_SORTE_DATABASE_JDBC_URL=${{ env.CONEXAO_DE_SORTE_DATABASE_JDBC_URL }}
            CONEXAO_DE_SORTE_DATABASE_R2DBC_URL=${{ env.CONEXAO_DE_SORTE_DATABASE_R2DBC_URL }}
            CONEXAO_DE_SORTE_DATABASE_USERNAME=${{ env.CONEXAO_DE_SORTE_DATABASE_USERNAME }}
            CONEXAO_DE_SORTE_DATABASE_PASSWORD=${{ env.CONEXAO_DE_SORTE_DATABASE_PASSWORD }}
            CONEXAO_DE_SORTE_REDIS_HOST=${{ env.CONEXAO_DE_SORTE_REDIS_HOST }}
            CONEXAO_DE_SORTE_REDIS_PORT=${{ env.CONEXAO_DE_SORTE_REDIS_PORT }}
            CONEXAO_DE_SORTE_REDIS_PASSWORD=${{ env.CONEXAO_DE_SORTE_REDIS_PASSWORD }}
            CONEXAO_DE_SORTE_REDIS_DATABASE=${{ env.CONEXAO_DE_SORTE_REDIS_DATABASE }}
            CONEXAO_DE_SORTE_JWT_ISSUER=${{ env.CONEXAO_DE_SORTE_JWT_ISSUER }}
            CONEXAO_DE_SORTE_JWT_JWKS_URI=${{ env.CONEXAO_DE_SORTE_JWT_JWKS_URI }}
            SERVICE_NAME=${{ env.SERVICE_NAME }}
            BUILD_DATE=${{ github.event.head_commit.timestamp || github.run_id }}
            VCS_REF=${{ github.sha }}
            VERSION=1.0.0

  sign-image:
    runs-on: self-hosted
    name: ✍️ Sign & Verify (100% OIDC keyless)
    needs: build-image
    # Evita assinatura em PRs (tokens não têm packages:write no GHCR)
    if: github.event_name != 'pull_request'
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    steps:
      - name: Verify OIDC token availability
        run: |
          echo "🔍 Verifying OIDC token is available..."
          if [ -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]; then
            echo "❌ OIDC token not available"
            exit 1
          fi
          echo "✅ OIDC token is available"
      - name: Resolve image digest ref
        id: ref
        run: |
          set -euo pipefail
          IMG="ghcr.io/${{ needs.build-image.outputs.image-name-lower }}@${{ needs.build-image.outputs.image-digest }}"
          echo "lower=$(echo "$IMG" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: v2.5.3
      - name: Login GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull digest
        run: docker pull "${{ steps.ref.outputs.lower }}"
      - name: Sign (keyless OIDC)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "🔐 Signing container image with OIDC keyless signature..."
          cosign sign --yes "${{ steps.ref.outputs.lower }}"
      - name: Verify OIDC signature
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "✅ Verifying OIDC keyless signature..."
          cosign verify \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "^https://github.com/${{ github.repository }}/\.github/workflows/.*@refs/heads/main$" \
            "${{ steps.ref.outputs.lower }}"
          echo "🎉 Container image signature verified successfully!"

  deploy-production:
    needs: [build-image, sign-image]
    runs-on: [self-hosted, batepapo-service]
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    name: 🌟 Deploy to Production (Self-hosted)
    permissions:
      id-token: write
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Load Azure Key Vault secrets (Redis)
        run: |
          set -euo pipefail
          VAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          if [[ "$VAULT_ENDPOINT" =~ https://([^.]+)\.vault\.azure\.net ]]; then
            VAULT="${BASH_REMATCH[1]}"
          else
            echo "ERROR: Invalid AZURE_KEYVAULT_ENDPOINT format: $VAULT_ENDPOINT" >&2
            echo "Expected format: https://<vault-name>.vault.azure.net/" >&2
            exit 1
          fi
          echo "Using Key Vault: $VAULT ($VAULT_ENDPOINT)" >&2
          get() {
            local name="$1"; shift || true
            local default_value="${1:-}"
            local v
            set +e
            v=$(az keyvault secret show --vault-name "$VAULT" --name "$name" --query value -o tsv 2>/dev/null)
            local rc=$?
            set -e
            if [[ $rc -ne 0 || -z "$v" ]]; then
              if [[ -n "$default_value" ]]; then
                echo "$default_value"
              else
                echo "ERROR: Secret $name not found and no default provided" >&2
                exit 1
              fi
            else
              echo "$v"
            fi
          }
          echo "REDIS_HOST=$(get conexao-de-sorte-redis-host)" >> "$GITHUB_ENV"
          echo "REDIS_PORT=$(get conexao-de-sorte-redis-port 6379)" >> "$GITHUB_ENV"
          echo "REDIS_PASSWORD=$(get conexao-de-sorte-redis-password '')" >> "$GITHUB_ENV"
          echo "REDIS_DATABASE=$(get conexao-de-sorte-redis-database 1)" >> "$GITHUB_ENV"
      - name: 🧹 Clean old containers
        run: |
          echo "🧹 Cleaning old batepapo-microservice containers..."
          if docker ps -a --format '{{.Names}}' | grep -q '^batepapo-microservice$'; then
            docker stop 'batepapo-microservice' && docker rm 'batepapo-microservice'
          fi
      - name: 🚀 Deploy batepapo-microservice
        run: |
          set -euo pipefail
          IMAGE_DIGEST="${{ needs.build-image.outputs.image-digest }}"
          IMAGE_NAME_LOWER="${{ needs.build-image.outputs.image-name-lower }}"
          FULL_IMAGE="ghcr.io/${IMAGE_NAME_LOWER}@${IMAGE_DIGEST}"
          docker login ghcr.io -u ${{ github.actor }} --password-stdin <<< '${{ secrets.GITHUB_TOKEN }}'
          docker pull "${FULL_IMAGE}"
          docker network create conexao-network 2>/dev/null || true
          docker run -d \
            --name "batepapo-microservice" \
            --network conexao-network \
            --restart unless-stopped \
            -p "8079:8079" \
            --health-cmd="curl -f http://localhost:8079/actuator/health/readiness || exit 1" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-retries=5 \
            --health-start-period=60s \
            -e SPRING_PROFILES_ACTIVE="prod,azure" \
            -e conexao-de-sorte-server-port="8079" \
            -e TZ="America/Sao_Paulo" \
            -e AZURE_CLIENT_ID='${{ secrets.AZURE_CLIENT_ID }}' \
            -e AZURE_TENANT_ID='${{ secrets.AZURE_TENANT_ID }}' \
            -e AZURE_SUBSCRIPTION_ID='${{ secrets.AZURE_SUBSCRIPTION_ID }}' \
            -e AZURE_KEYVAULT_ENDPOINT='${{ secrets.AZURE_KEYVAULT_ENDPOINT }}' \
            -e AZURE_KEYVAULT_NAME='${{ secrets.AZURE_KEYVAULT_NAME }}' \
            -e conexao-de-sorte-redis-host="${REDIS_HOST}" \
            -e conexao-de-sorte-redis-port="${REDIS_PORT}" \
            -e conexao-de-sorte-redis-password="${REDIS_PASSWORD}" \
            -e conexao-de-sorte-redis-database="${REDIS_DATABASE}" \
            -e conexao-de-sorte-auth-service-url="http://auth-microservice:8081" \
            -e conexao-de-sorte-jwt-jwks-uri="http://auth-microservice:8081/.well-known/jwks.json" \
            --label "traefik.enable=true" \
            --label "traefik.docker.network=conexao-network" \
            --label "traefik.http.routers.batepapo.rule=Host(\\`chat.conexaodesorte.com.br\\`)" \
            --label "traefik.http.routers.batepapo.entrypoints=websecure" \
            --label "traefik.http.routers.batepapo.tls.certresolver=letsencrypt" \
            --label "traefik.http.services.batepapo.loadbalancer.server.port=8079" \
            "${FULL_IMAGE}"
      - name: Wait for service to be ready
        run: |
          TIMEOUT=180
          ELAPSED=0
          while [ $ELAPSED -lt $TIMEOUT ]; do
            if docker exec batepapo-microservice curl -f -s http://localhost:8079/actuator/health/readiness >/dev/null 2>&1; then
              echo "✅ Service is ready and healthy!"
              exit 0
            fi
            sleep 10
            ELAPSED=$((ELAPSED + 10))
          done
          echo "❌ Service failed to become ready"
          docker logs batepapo-microservice
          exit 1

  notify:
    runs-on: self-hosted
    name: 📢 Notification
    if: always()
    needs: [build-and-test, build-image, sign-image, deploy-production]
    steps:
      - name: 📧 Send Slack notification
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            STATUS="🎉 SUCCESS"
            COLOR="good"
          else
            STATUS="❌ FAILED"
            COLOR="danger"
          fi
          if [ -n "${SLACK_WEBHOOK_URL}" ]; then
            curl -X POST -H 'Content-type: application/json' \
            --data "{'text':'$STATUS: Batepapo Microservice Deployment','attachments':[{'color':'$COLOR','fields':[{'title':'Branch','value':'${{ github.ref_name }}','short':true},{'title':'Commit','value':'${{ github.sha }}','short':true}]}]}" \
            $SLACK_WEBHOOK_URL
          else
            echo "SLACK_WEBHOOK_URL not configured, skipping notification"
          fi
