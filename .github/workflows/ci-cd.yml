name: "üí¨ Bate-papo - CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Destino do deploy"
        required: false
        default: "production"
        type: choice
        options: [ staging, production ]

env:
  SERVICE_NAME: batepapo
  STACK_NAME: conexao-batepapo
  DOCKER_NETWORK_NAME: conexao-network-swarm
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: [ self-hosted, Linux, X64, conexao, conexao-de-sorte-backend-batepapo ]
    timeout-minutes: 30
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Definir hor√°rio inicial
        run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Validar estrutura
        shell: bash
        run: |
          set -euo pipefail
          # Este script precisa estar dispon√≠vel no runner ou ser trazido para o repo
          if [ -f ".github/workflows/scripts/validate-required-files.sh" ]; then
            chmod +x .github/workflows/scripts/validate-required-files.sh
            ./.github/workflows/scripts/validate-required-files.sh microservice
          else
            echo "Aviso: Script de valida√ß√£o n√£o encontrado."
          fi

      - name: Configurar Java 25 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '25'
          cache: maven

      - name: Executar build e testes
        shell: bash
        run: |
          set -euo pipefail
          ./mvnw -B clean verify

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build e push da imagem
        id: build-and-push
        shell: bash
        run: |
          set -euo pipefail
          REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          IMAGE_URI="ghcr.io/${REPO_LOWERCASE}/conexao-de-sorte-backend-batepapo:${TIMESTAMP}"

          # Copia o JAR para o local esperado pelo Dockerfile
          mkdir -p target
          cp -f ./target/conexao-de-sorte-backend-batepapo-*.jar ./target/app.jar

          docker buildx build \
            --platform linux/amd64 \
            --push \
            --tag "$IMAGE_URI" \
            --tag "ghcr.io/${REPO_LOWERCASE}/conexao-de-sorte-backend-batepapo:latest" \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            .

          echo "image-uri=$IMAGE_URI" >> "$GITHUB_OUTPUT"
        env:
          IMAGE_URI: "ghcr.io/${{ github.repository_owner }}/conexao-de-sorte-backend-batepapo:latest"

      - name: Azure Login (OIDC)
        if: github.ref == 'refs/heads/main'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üîê Criar Docker Secrets from Azure Key Vault
        if: github.ref == 'refs/heads/main'
        run: |
          set -euo pipefail
          echo "üîê Criando Docker Secrets a partir dos valores do Azure Key Vault..."
          KEYVAULT_NAME=$(echo "${{ secrets.AZURE_KEYVAULT_ENDPOINT }}" | sed 's|https://\(.*\)\.vault\.azure\.net/.*|\1|')
          secrets_list="conexao-de-sorte-database-r2dbc-url,conexao-de-sorte-database-username,conexao-de-sorte-database-password,conexao-de-sorte-redis-host,conexao-de-sorte-redis-port,conexao-de-sorte-redis-password,conexao-de-sorte-redis-database,conexao-de-sorte-jwt-issuer,conexao-de-sorte-jwt-jwks-uri,conexao-de-sorte-server-port"
          
          for secret_name in $(echo $secrets_list | sed "s/,/ /g"); do
            secret_value=$(az keyvault secret show --vault-name "$KEYVAULT_NAME" --name "$secret_name" --query 'value' -o tsv)
            if [[ -n "$secret_value" ]]; then
              docker secret rm "$secret_name" >/dev/null 2>&1 || true
              echo -n "$secret_value" | docker secret create "$secret_name" -
              echo "‚úÖ Docker Secret criado: $secret_name"
            else
              echo "‚ö†Ô∏è Secret $secret_name n√£o encontrado no Key Vault"
            fi
          done

      - name: Deploy da stack
        if: github.ref == 'refs/heads/main'
        env:
          IMAGE_URI: ${{ steps.build-and-push.outputs.image-uri }}
        run: |
          set -euo pipefail
          docker pull "$IMAGE_URI"
          COMPOSE_PROJECT_NAME="${STACK_NAME}" docker stack deploy -c docker-compose.yml --with-registry-auth "${STACK_NAME}"
          sleep 30

      - name: Verificar servi√ßos
        if: github.ref == 'refs/heads/main'
        run: |
          set -euo pipefail
          docker service ls --filter name="${STACK_NAME}_" --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}"

      - name: Limpeza p√≥s-deploy
        if: always() && github.ref == 'refs/heads/main'
        run: |
          set -euo pipefail
          docker image prune -f --filter "until=168h" || true
          docker container prune -f --filter "until=24h" || true

      - name: Resumo do deploy
        if: always() && github.ref == 'refs/heads/main'
        run: |
          END_TIME=$(date +%s)
          START_TIME=${START_TIME:-$END_TIME}
          ELAPSED=$((END_TIME - START_TIME))
          MIN=$((ELAPSED/60))
          SEC=$((ELAPSED%60))
          echo "============================================="
          echo "üí¨ BATE-PAPO - RESUMO"
          echo "Stack........: ${STACK_NAME}"
          echo "Imagem.......: ${{ steps.build-and-push.outputs.image-uri }}"
          echo "Tempo........: ${MIN}m ${SEC}s"
          echo "============================================="