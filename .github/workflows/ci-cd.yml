name: "üí¨ Bate-papo - CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Destino do deploy"
        required: false
        default: "production"
        type: choice
        options: [ staging, production ]

env:
  SERVICE_NAME: batepapo
  STACK_NAME: conexao-batepapo
  DOCKER_NETWORK_NAME: conexao-network-swarm
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: false

jobs:
  validate-environment:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validar estrutura
        shell: bash
        run: |
          set -euo pipefail
          chmod +x .github/workflows/scripts/validate-required-files.sh
          ./.github/workflows/scripts/validate-required-files.sh microservice

  build-and-test:
    needs: validate-environment
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configurar Java 25 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: '25'
          cache: maven

      - name: Executar build e testes
        shell: bash
        run: |
          set -euo pipefail
          ./mvnw -B clean verify

      - name: Publicar artefato JAR
        uses: actions/upload-artifact@v4
        with:
          name: batepapo-jar
          path: target/conexao-de-sorte-backend-batepapo-*.jar
          retention-days: 1

      - name: Publicar artefatos de deploy
        uses: actions/upload-artifact@v4
        with:
          name: batepapo-configs
          path: |
            docker-compose.yml
            Dockerfile
            docker/
          retention-days: 1

  build-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    outputs:
      image-uri: ${{ steps.build-and-push.outputs.image-uri }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Baixar artefatos JAR
        uses: actions/download-artifact@v4
        with:
          name: batepapo-jar
          path: target/

      - name: Baixar artefatos de deploy
        uses: actions/download-artifact@v4
        with:
          name: batepapo-configs
          path: .

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build e push da imagem
        id: build-and-push
        shell: bash
        run: |
          set -euo pipefail
          REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          IMAGE_URI="ghcr.io/${REPO_LOWERCASE}/conexao-de-sorte-backend-batepapo:${TIMESTAMP}"

          docker buildx build \
            --platform linux/amd64 \
            --push \
            --tag "$IMAGE_URI" \
            --tag "ghcr.io/${REPO_LOWERCASE}/conexao-de-sorte-backend-batepapo:latest" \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            .

          echo "image-uri=$IMAGE_URI" >> "$GITHUB_OUTPUT"

  deploy-selfhosted:
    needs: build-image
    if: |
      github.ref == 'refs/heads/main' &&
      (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production'))
    runs-on: [ self-hosted, Linux, X64, conexao, conexao-de-sorte-backend-batepapo ]
    timeout-minutes: 20
    permissions:
      id-token: write
      contents: read
      packages: read
    env:
      STACK_NAME: conexao-batepapo
      DOCKER_NETWORK_NAME: conexao-network-swarm
      IMAGE_URI: ${{ needs.build-image.outputs.image-uri }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Definir hor√°rio inicial
        run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Baixar artefatos de deploy
        uses: actions/download-artifact@v4
        with:
          name: batepapo-configs
          path: .

      - name: Login no GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üîê Get secrets from Azure Key Vault
        shell: bash
        id: get-secrets
        run: |
          set -euo pipefail
          
          # Usar endpoint do Key Vault se dispon√≠vel, sen√£o usar nome
          KEYVAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          if [[ -n "$KEYVAULT_ENDPOINT" ]]; then
            # Extrair o nome do Key Vault do endpoint (formato: https://<nome>.vault.azure.net/)
            KEYVAULT_NAME=$(echo "$KEYVAULT_ENDPOINT" | sed 's|https://\(.*\)\.vault\.azure\.net/.*|\1|')
            echo "üîë Usando Key Vault do endpoint: $KEYVAULT_NAME"
          else
            KEYVAULT_NAME="kv-conexao-de-sorte"
            echo "üîë Usando Key Vault do nome: $KEYVAULT_NAME"
          fi

          # Lista de segredos a obter
          secrets_list="conexao-de-sorte-database-r2dbc-url,conexao-de-sorte-database-username,conexao-de-sorte-database-password,conexao-de-sorte-redis-host,conexao-de-sorte-redis-port,conexao-de-sorte-redis-password,conexao-de-sorte-redis-database,conexao-de-sorte-jwt-secret,conexao-de-sorte-jwt-issuer,conexao-de-sorte-jwt-signing-key,conexao-de-sorte-jwt-verification-key,conexao-de-sorte-server-port,conexao-de-sorte-cors-allowed-origins,conexao-de-sorte-cors-allow-credentials"

          IFS=',' read -ra SECRETS_ARRAY <<< "$secrets_list"
          for secret_name in "${SECRETS_ARRAY[@]}"; do
            echo "üîç Obtendo segredo: $secret_name"
            secret_value=$(az keyvault secret show --vault-name "$KEYVAULT_NAME" --name "$secret_name" --query 'value' -o tsv 2>/dev/null || echo "")

            if [[ -n "$secret_value" ]]; then
              echo "‚úÖ Segredo obtido: $secret_name"
              # Salvar com o nome original (com tra√ßos) para compatibilidade com o step de valida√ß√£o
              echo "${secret_name}=${secret_value}" >> $GITHUB_OUTPUT
              # Tamb√©m salvar como vari√°vel de ambiente para uso posterior
              env_var_name=$(echo "$secret_name" | tr '-' '_' | tr '[:lower:]' '[:upper:]')
              echo "${env_var_name}=${secret_value}" >> $GITHUB_ENV
            else
              echo "‚ö†Ô∏è Segredo n√£o encontrado: $secret_name"
            fi
          done

          echo "‚úÖ Obten√ß√£o de segredos conclu√≠da"

      - name: üîí Mask sensitive values
        run: |
          echo ::add-mask::"${{ steps.get-secrets.outputs.conexao-de-sorte-database-password }}"
          echo ::add-mask::"${{ steps.get-secrets.outputs.conexao-de-sorte-redis-password }}"
          echo ::add-mask::"${{ steps.get-secrets.outputs.conexao-de-sorte-jwt-secret }}"
          echo ::add-mask::"${{ steps.get-secrets.outputs.conexao-de-sorte-jwt-signing-key }}"

      - name: Preparar rede overlay
        shell: bash
        run: |
          set -euo pipefail
          if ! docker network ls --format '{{.Name}}' | grep -q "^${DOCKER_NETWORK_NAME}$"; then
            docker network create --driver overlay --attachable "${DOCKER_NETWORK_NAME}" || true
          fi

      - name: Remover stack anterior
        shell: bash
        run: |
          set -euo pipefail
          if docker stack ls --format '{{.Name}}' | grep -q "^${STACK_NAME}$"; then
            docker stack rm "${STACK_NAME}"
            sleep 15
          fi

      - name: Deploy da stack
        shell: bash
        env:
          # Banco de Dados
          DATABASE_R2DBC_URL: ${{ steps.get-secrets.outputs.conexao-de-sorte-database-r2dbc-url }}
          DATABASE_USERNAME: ${{ steps.get-secrets.outputs.conexao-de-sorte-database-username }}
          DATABASE_PASSWORD: ${{ steps.get-secrets.outputs.conexao-de-sorte-database-password }}
          # Redis
          REDIS_HOST: ${{ steps.get-secrets.outputs.conexao-de-sorte-redis-host }}
          REDIS_PORT: ${{ steps.get-secrets.outputs.conexao-de-sorte-redis-port }}
          REDIS_PASSWORD: ${{ steps.get-secrets.outputs.conexao-de-sorte-redis-password }}
          REDIS_DATABASE: ${{ steps.get-secrets.outputs.conexao-de-sorte-redis-database }}
          # JWT
          CONEXAO_DE_SORTE_JWT_SECRET: ${{ steps.get-secrets.outputs.conexao-de-sorte-jwt-secret }}
          CONEXAO_DE_SORTE_JWT_ISSUER: ${{ steps.get-secrets.outputs.conexao-de-sorte-jwt-issuer }}
          CONEXAO_DE_SORTE_JWT_SIGNING_KEY: ${{ steps.get-secrets.outputs.conexao-de-sorte-jwt-signing-key }}
          CONEXAO_DE_SORTE_JWT_VERIFICATION_KEY: ${{ steps.get-secrets.outputs.conexao-de-sorte-jwt-verification-key }}
          # Server e CORS
          CONEXAO_DE_SORTE_SERVER_PORT: ${{ steps.get-secrets.outputs.conexao-de-sorte-server-port }}
          CONEXAO_DE_SORTE_CORS_ALLOWED_ORIGINS: ${{ steps.get-secrets.outputs.conexao-de-sorte-cors-allowed-origins }}
          CONEXAO_DE_SORTE_CORS_ALLOW_CREDENTIALS: ${{ steps.get-secrets.outputs.conexao-de-sorte-cors-allow-credentials }}
        run: |
          set -euo pipefail

          if [[ -z "$DATABASE_USERNAME" || -z "$DATABASE_PASSWORD" ]]; then
            echo "‚ùå Secrets essenciais de banco ausentes"
            exit 1
          fi

          docker pull "$IMAGE_URI"
          COMPOSE_PROJECT_NAME="${STACK_NAME}" docker stack deploy -c docker-compose.yml "${STACK_NAME}"
          sleep 30

      - name: Verificar servi√ßos
        shell: bash
        run: |
          set -euo pipefail
          docker service ls --filter name="${STACK_NAME}_" --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}"

      - name: Validar health via Traefik
        shell: bash
        env:
          HEALTH_MONITOR_URL: https://traefik.conexaodesorte.com.br/health/service/batepapo
        run: |
          set -euo pipefail
          TIMEOUT_TOTAL=300
          INTERVAL=10
          elapsed=0
          last_response=""
          status=""

          while [ $elapsed -lt $TIMEOUT_TOTAL ]; do
            echo "üîé Consultando Traefik ($elapsed/${TIMEOUT_TOTAL}s)..."
            response=$(curl -sf --max-time 10 "$HEALTH_MONITOR_URL" 2>/dev/null || true)
            last_response="$response"

            if [[ -n "$response" ]]; then
              status=$(printf '%s' "$response" | python3 -c "import json, sys; data=json.load(sys.stdin); print(data.get('status',''))" 2>/dev/null || true)
              status=${status//$'\n'/}
              echo "üìä Status reportado: ${status:-indefinido}"
              if [[ "$status" == "healthy" ]]; then
                echo "‚úÖ Traefik confirmou Batepapo como healthy"
                exit 0
              fi
            else
              echo "‚ö†Ô∏è Traefik sem resposta nesta tentativa"
            fi

            sleep "$INTERVAL"
            elapsed=$((elapsed + INTERVAL))
          done

          echo "‚ùå Traefik nao confirmou Batepapo como healthy apos ${TIMEOUT_TOTAL}s"
          echo "üìù Ultima resposta recebida: ${last_response:-<sem resposta>}"
          exit 1

      - name: Limpeza p√≥s-deploy
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          docker image prune -f --filter "until=168h" || true
          docker container prune -f --filter "until=24h" || true

      - name: Resumo do deploy
        shell: bash
        run: |
          END_TIME=$(date +%s)
          START_TIME=${START_TIME:-$END_TIME}
          ELAPSED=$((END_TIME - START_TIME))
          MIN=$((ELAPSED/60))
          SEC=$((ELAPSED%60))
          echo "============================================="
          echo "üí¨ BATE-PAPO - RESUMO"
          echo "Stack........: ${STACK_NAME}"
          echo "Imagem.......: ${IMAGE_URI}"
          echo "Tempo........: ${MIN}m ${SEC}s"
          echo "============================================="

  notify:
    if: always()
    needs: [ build-and-test, deploy-selfhosted ]
    runs-on: ubuntu-latest
    steps:
      - name: Registrar status final
        shell: bash
        run: |
          echo "Pipeline conclu√≠do com status: ${{ needs.deploy-selfhosted.result }}"
