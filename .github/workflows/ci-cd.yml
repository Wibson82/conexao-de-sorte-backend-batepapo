name: 💬 Batepapo Microservice - CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Destino do deploy'
        required: false
        default: 'production'
        type: choice
        options: [production]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SERVICE_NAME: batepapo
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: 🏗️ Build and Test
    steps:
      - uses: actions/checkout@v4
      - name: Guard - forbid r2dbc:h2 outside tests
        run: |
          set -euo pipefail
          FOUND=$(grep -R --line-number --include='*.yml' --include='*.properties' --include='*.yaml' "r2dbc:h2" src || true)
          if echo "$FOUND" | grep -v "src/test/" | grep -q "r2dbc:h2"; then
            echo "Forbidden r2dbc:h2 reference outside src/test" >&2
            echo "$FOUND" | grep -v "src/test/" >&2 || true
            exit 1
          fi
      - name: Guard - H2 not in non-test scopes
        run: |
          set -euo pipefail
          mvn -B -q dependency:list -DincludeScope=compile -DoutputFile=dep.txt -DappendOutput=true || true
          mvn -B -q dependency:list -DincludeScope=runtime -DoutputFile=dep.txt -DappendOutput=true || true
          if grep -E "com\\.h2database:h2|io\\.r2dbc:r2dbc-h2" dep.txt; then
            echo "H2 present in non-test scope (compile/runtime)" >&2
            exit 1
          fi
      - name: Setup Java 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: maven
      - name: Verify Maven wrapper
        run: |
          chmod +x ./mvnw
          ./mvnw --version
      # DESABILITADO: Testes devido incompatibilidade Java 24 com Mockito
      # - name: Run tests with coverage verification
      #   run: ./mvnw clean verify -Dspring.profiles.active=test
      - name: Build application
        run: ./mvnw clean package -DskipTests -Dspring.profiles.active=prod
      # DESABILITADO: JaCoCo devido incompatibilidade Java 24 com Mockito
      # - name: Upload JaCoCo Coverage Reports
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: jacoco-reports
      #     path: |
      #       target/site/jacoco/
      #       target/site/jacoco/jacoco.xml
      #       target/site/jacoco/jacoco.csv
      #     retention-days: 30
      - name: Upload application artifact
        uses: actions/upload-artifact@v4
        with:
          name: batepapo-microservice-jar
          path: target/*.jar
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    name: 🛡️ Security Analysis (Snyk SAST)
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: maven
      - name: Verify Maven wrapper
        run: |
          chmod +x ./mvnw
          ./mvnw --version
      - name: Run Snyk Security Scan
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --severity-threshold=high --fail-on=all --project-name=batepapo-service
      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif
      - name: Monitor with Snyk (main branch only)
        if: github.ref == 'refs/heads/main'
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --project-name=batepapo-service

  build-image:
    runs-on: ubuntu-latest
    name: 🐳 Build Docker Image
    needs: [build-and-test, security-scan]
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Download application artifact
        uses: actions/download-artifact@v4
        with:
          name: batepapo-microservice-jar
          path: target/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  sign-image:
    runs-on: ubuntu-latest
    name: 🔐 Sign Container Image
    needs: build-image
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.4'
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Sign container image with OIDC keyless signature
        run: |
          echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.meta.outputs.digest }}

  deploy-production:
    runs-on: [self-hosted, linux, production, batepapo-service]
    name: 🚀 Deploy to Production
    needs: [build-image, sign-image]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment:
      name: production
      url: https://api.conexaodesorte.com.br/batepapo/health
    steps:
      - name: Retrieve secrets from Azure Key Vault
        uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: "kv-conexao-de-sorte-prod"
          secrets: |
            database-url
            database-username
            database-password
            redis-url
            redis-password
            jwt-secret
            oauth2-client-id
            oauth2-client-secret
        id: secrets
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create or update Docker network
        run: |
          docker network create conexao-network 2>/dev/null || echo "Network already exists"
      - name: Stop and remove existing container
        run: |
          docker stop batepapo-service 2>/dev/null || echo "Container not running"
          docker rm batepapo-service 2>/dev/null || echo "Container not found"
      - name: Pull and run new container
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker run -d \
            --name batepapo-service \
            --network conexao-network \
            --restart unless-stopped \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e SPRING_R2DBC_URL="${{ steps.secrets.outputs.database-url }}" \
            -e SPRING_R2DBC_USERNAME="${{ steps.secrets.outputs.database-username }}" \
            -e SPRING_R2DBC_PASSWORD="${{ steps.secrets.outputs.database-password }}" \
            -e SPRING_DATA_REDIS_URL="${{ steps.secrets.outputs.redis-url }}" \
            -e SPRING_DATA_REDIS_PASSWORD="${{ steps.secrets.outputs.redis-password }}" \
            -e JWT_SECRET="${{ steps.secrets.outputs.jwt-secret }}" \
            -e SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID="${{ steps.secrets.outputs.oauth2-client-id }}" \
            -e SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET="${{ steps.secrets.outputs.oauth2-client-secret }}" \
            -e TZ=America/Sao_Paulo \
            --health-cmd="curl -f http://localhost:8080/actuator/health || exit 1" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-retries=3 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      - name: Wait for service to be healthy
        run: |
          echo "Waiting for service to be healthy..."
          for i in {1..30}; do
            if docker inspect --format='{{.State.Health.Status}}' batepapo-service | grep -q "healthy"; then
              echo "Service is healthy!"
              exit 0
            fi
            echo "Attempt $i/30: Service not healthy yet, waiting..."
            sleep 10
          done
          echo "Service failed to become healthy within 5 minutes"
          docker logs batepapo-service --tail 50
          exit 1
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          curl -f http://localhost:8080/actuator/health || {
            echo "Health check failed"
            docker logs batepapo-service --tail 50
            exit 1
          }
          echo "Deployment verified successfully!"

  notify:
    runs-on: ubuntu-latest
    name: 📢 Notify
    needs: [build-and-test, security-scan, build-image, sign-image, deploy-production]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
