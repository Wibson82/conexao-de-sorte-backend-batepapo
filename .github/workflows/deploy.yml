name: 🔐 Batepapo Microservice - CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Destino do deploy'
        required: false
        default: 'production'
        type: choice
        options: [staging, production]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SERVICE_NAME: batepapo
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: false

jobs:
  test-runner:
    runs-on: [self-hosted, batepapo-service]
    name: 🧪 Test Self-hosted Runner
    steps:
      - uses: actions/checkout@v4
      - name: "Guard: forbid r2dbc:h2 outside tests"
        run: |
          set -euo pipefail
          FOUND=$(grep -R --line-number --include='*.yml' --include='*.properties' --include='*.yaml' "r2dbc:h2" src || true)
          if echo "$FOUND" | grep -v "src/test/" | grep -q "r2dbc:h2"; then
            echo "Forbidden r2dbc:h2 reference outside src/test" >&2
            echo "$FOUND" | grep -v "src/test/" >&2 || true
            exit 1
          fi
      - name: "Guard: H2 not in non-test scopes"
        run: |
          set -euo pipefail
          mvn -B -q dependency:list -DincludeScope=compile -DoutputFile=dep.txt -DappendOutput=true || true
          if grep -E "com\\.h2database:h2|io\\.r2dbc:r2dbc-h2" dep.txt; then
            echo "H2 present in non-test scope (compile/runtime)" >&2
            exit 1
          fi
      - name: Test runner connectivity
        run: |
          echo "🎉 Self-hosted runner está funcionando!"
          echo "🏃 Runner: $(hostname)"
          echo "📅 Data: $(date)"
          echo "👤 Usuário: $(whoami)"
          echo "📁 Diretório: $(pwd)"
          echo "🔍 Java version:"
          java -version || echo "Java não encontrado"
          echo "🐳 Docker version:"
          docker --version || echo "Docker não encontrado"

  build-and-test:
    needs: test-runner
    runs-on: self-hosted
    name: 🏗️ Build and Test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: maven
      - name: Verify Maven wrapper
        run: |
          chmod +x ./mvnw
          ./mvnw --version
      - name: Build application (skip tests)
        run: ./mvnw clean package -DskipTests
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: batepapo-microservice-jar
          path: target/*.jar
          retention-days: 7

  build-image:
    runs-on: self-hosted
    name: 🐳 Build Docker Image
    needs: build-and-test
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-name-lower: ${{ steps.image_name.outputs.image_name_lower }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Compute lowercase image name
        id: image_name
        run: |
          set -euo pipefail
          REPO='${{ env.IMAGE_NAME }}'
          echo "image_name_lower=$(echo "$REPO" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.image_name_lower }}
          tags: |
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY-MM-DD-HHmmss'}}-{{sha}},enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Batepapo Microservice
            org.opencontainers.image.description=Chat microservice
            org.opencontainers.image.service=${{ env.SERVICE_NAME }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true
          provenance: mode=max
          cache-from: type=gha
          cache-to: type=gha,mode=max
          network: host
          build-args: |
            SERVICE_NAME=${{ env.SERVICE_NAME }}
            BUILD_DATE=${{ github.event.head_commit.timestamp || github.run_id }}
            VCS_REF=${{ github.sha }}
            VERSION=1.0.0

  sign-image:
    runs-on: self-hosted
    name: ✍️ Sign & Verify (100% OIDC keyless)
    needs: build-image
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    steps:
      - name: Verify OIDC token availability
        run: |
          echo "🔍 Verifying OIDC token is available..."
          if [ -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]; then
            echo "❌ OIDC token not available"
            exit 1
          fi
          echo "✅ OIDC token is available"
      - name: Resolve image digest ref
        id: ref
        run: |
          set -euo pipefail
          IMG="ghcr.io/${{ needs.build-image.outputs.image-name-lower }}@${{ needs.build-image.outputs.image-digest }}"
          echo "lower=$(echo "$IMG" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: v2.5.3
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull digest
        run: docker pull "${{ steps.ref.outputs.lower }}"
      - name: Sign (keyless OIDC)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "🔐 Signing container image with OIDC keyless signature..."
          cosign sign --yes "${{ steps.ref.outputs.lower }}"
      - name: Verify OIDC signature
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "✅ Verifying OIDC keyless signature..."
          cosign verify \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "^https://github.com/${{ github.repository }}/\.github/workflows/.*@refs/heads/main$" \
            "${{ steps.ref.outputs.lower }}"
          echo "🎉 Container image signature verified successfully!"
      - name: Generate SBOM attestation (OIDC)
        env:
          COSIGN_EXPERIMENTAL: "1"  
        run: |
          echo "📋 Generating SBOM attestation with OIDC..."
          cosign attest --yes --type=spdxjson \
            --predicate=/dev/null \
            "${{ steps.ref.outputs.lower }}" || echo "SBOM attestation optional - continuing"

  deploy-production:
    needs: [build-image, sign-image]
    runs-on: [self-hosted, batepapo-service]
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    name: 🌟 Deploy to Production (Self-hosted)
    permissions:
      id-token: write
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Load Azure Key Vault secrets
        run: |
          set -euo pipefail
          VAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          if [[ "$VAULT_ENDPOINT" =~ https://([^.]+)\.vault\.azure\.net ]]; then
            VAULT="${BASH_REMATCH[1]}"
          else
            echo "ERROR: Invalid AZURE_KEYVAULT_ENDPOINT format: $VAULT_ENDPOINT" >&2
            echo "Expected format: https://vault-name.vault.azure.net/" >&2
            exit 1
          fi
          echo "Loading secrets from Azure Key Vault: $VAULT (endpoint: $VAULT_ENDPOINT)" >&2
          echo "VAULT=$VAULT" >> "$GITHUB_ENV"
          get() { 
            echo "Fetching secret: $1" >&2
            SECRET_VALUE=$(az keyvault secret show --vault-name "$VAULT" --name "$1" --query value -o tsv 2>/dev/null)
            if [ $? -ne 0 ] || [ -z "$SECRET_VALUE" ]; then
              echo "ERROR: Secret $1 not found in Azure Key Vault $VAULT" >&2
              echo "Available secrets in vault:" >&2
              az keyvault secret list --vault-name "$VAULT" --query '[].name' -o tsv >&2
              exit 1
            fi
            echo "$SECRET_VALUE"
          }
          echo "DB_R2DBC_URL=$(get conexao-de-sorte-database-r2dbc-url)" >> $GITHUB_ENV
          echo "DB_USERNAME=$(get conexao-de-sorte-database-username)" >> $GITHUB_ENV
          echo "DB_PASSWORD=$(get conexao-de-sorte-database-password)" >> $GITHUB_ENV
          echo "DB_JDBC_URL=$(get conexao-de-sorte-database-jdbc-url)" >> $GITHUB_ENV
          echo "REDIS_HOST=$(get conexao-de-sorte-redis-host)" >> $GITHUB_ENV
          echo "REDIS_PORT=$(get conexao-de-sorte-redis-port)" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=$(get conexao-de-sorte-redis-password)" >> $GITHUB_ENV
          echo "REDIS_DATABASE=$(get conexao-de-sorte-redis-database)" >> $GITHUB_ENV
          echo "JWT_SECRET=$(get conexao-de-sorte-jwt-secret)" >> $GITHUB_ENV
          echo "JWT_KEY_ID=$(get conexao-de-sorte-jwt-key-id)" >> $GITHUB_ENV
          echo "JWT_SIGNING_KEY=$(get conexao-de-sorte-jwt-signing-key)" >> $GITHUB_ENV
          echo "JWT_VERIFICATION_KEY=$(get conexao-de-sorte-jwt-verification-key)" >> $GITHUB_ENV
          echo "JWT_ISSUER=$(get conexao-de-sorte-jwt-issuer)" >> $GITHUB_ENV
          echo "JWT_JWKS_URI=$(get conexao-de-sorte-jwt-jwks-uri)" >> $GITHUB_ENV
          echo "ENCRYPTION_MASTER_KEY=$(get conexao-de-sorte-encryption-master-key)" >> $GITHUB_ENV
          SECRETS_DIR=$(mktemp -d -p /tmp conexao_batepapo_secrets_XXXX)
          umask 077
          printf '%s' "$(get conexao-de-sorte-jwt-privatekey)" > "$SECRETS_DIR/jwt_private.pem"
          printf '%s' "$(get conexao-de-sorte-jwt-publickey)" > "$SECRETS_DIR/jwt_public.pem"
          printf '%s' "$(get conexao-de-sorte-encryption-master-key)" > "$SECRETS_DIR/encryption_master_key"
          chmod 600 "$SECRETS_DIR"/*
          echo "SECRETS_DIR=$SECRETS_DIR" >> $GITHUB_ENV
          echo "Success: Azure Key Vault secrets loaded successfully" >&2
      - name: 🧹 Clean old containers
        run: |
          set -euo pipefail
          echo "🧹 Cleaning old batepapo-microservice containers..."
          if docker ps -a --format '{{.Names}}' | grep -q '^batepapo-microservice$'; then
            echo '🛑 Stopping container: batepapo-microservice'
            docker stop 'batepapo-microservice' || true
            echo '🗑️ Removing container: batepapo-microservice'
            docker rm 'batepapo-microservice' || true
          else
            echo '✅ No batepapo-microservice container found'
          fi
          echo "✅ Container cleanup completed"
      - name: 🚀 Deploy batepapo-microservice
        run: |
          set -euo pipefail
          export TZ=America/Sao_Paulo
          IMAGE_DIGEST="${{ needs.build-image.outputs.image-digest }}"
          IMAGE_NAME_LOWER="${{ needs.build-image.outputs.image-name-lower }}"
          FULL_IMAGE="ghcr.io/${IMAGE_NAME_LOWER}@${IMAGE_DIGEST}"
          echo "🚀 Starting deployment..."
          echo "   - Service: batepapo-microservice"
          echo "   - Image: ${FULL_IMAGE}"
          echo "🔑 Logging in to GHCR..."
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u '${{ github.actor }}' --password-stdin
          echo "📥 Pulling image: ${FULL_IMAGE}"
          docker pull "${FULL_IMAGE}"
          echo "🌐 Creating Docker network if it doesn't exist..."
          docker network create conexao-network 2>/dev/null || true
          echo "🚀 Starting batepapo-microservice container..."
          docker run -d \
            --name "batepapo-microservice" \
            --network conexao-network \
            --restart unless-stopped \
            -p "8089:8080" \
            --health-cmd="curl -f http://localhost:8089/actuator/health/readiness && curl -f http://localhost:8089/actuator/health/liveness || exit 1" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-retries=5 \
            --health-start-period=60s \
            -e JAVA_TOOL_OPTIONS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Xms256m -Xmx1024m -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -Dfile.encoding=UTF-8" \
            -e SPRING_PROFILES_ACTIVE="prod,azure" \
            -e ENVIRONMENT="production" \
            -e SERVER_PORT="8081" \
            -e TZ="America/Sao_Paulo" \
            -e AZURE_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}" \
            -e AZURE_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}" \
            -e AZURE_KEYVAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}" \
            -e AZURE_KEYVAULT_ENABLED="true" \
            --label "traefik.enable=true" \
            --label "traefik.docker.network=conexao-network" \
            --label "traefik.http.routers.batepapo.rule=Host(`batepapo.conexaodesorte.com.br`)" \
            --label "traefik.http.routers.batepapo.entrypoints=websecure" \
            --label "traefik.http.routers.batepapo.tls.certresolver=letsencrypt" \
            --label "traefik.http.services.batepapo.loadbalancer.server.port=8081" \
            "${FULL_IMAGE}"
          echo "✅ Container deployed successfully"
          echo "🔍 Waiting for service to be ready..."
          TIMEOUT=180
          ELAPSED=0
          while [ $ELAPSED -lt $TIMEOUT ]; do
            if docker exec batepapo-microservice curl -f -s http://localhost:8089/actuator/health/readiness >/dev/null 2>&1; then
              echo "✅ Service is ready and healthy!"
              break
            fi
            echo "⏳ Waiting for service readiness... ($ELAPSED/$TIMEOUT seconds)"
            sleep 10
            ELAPSED=$((ELAPSED + 10))
          done
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "❌ Service failed to become ready within $TIMEOUT seconds"
            echo "🔍 Container logs:"
            docker logs batepapo-microservice --tail 50
            exit 1
          fi
          echo "🔍 Final container status:"
          docker ps --filter name=batepapo-microservice --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          echo "🎉 Deployment completed successfully - Service is healthy!"

  notify:
    runs-on: self-hosted
    name: 📢 Notification
    if: always()
    needs: [build-and-test, build-image, sign-image, deploy-production]
    steps:
      - uses: 8398a7/action-slack@v3
        if: always() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          channel: '#ci-cd-notifications'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "username": "GitHub Actions",
              "icon_emoji": ":speech_balloon:",
              "attachments": [{
                "color": "${{ job.status }}" == "success" ? "good" : "${{ job.status }}" == "failure" ? "danger" : "warning",
                "fields": [{
                  "title": "🔐 Batepapo Microservice",
                  "value": "Status: ${{ job.status }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}",
                  "short": true
                }]
              }]
            }
