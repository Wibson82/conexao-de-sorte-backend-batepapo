package br.tec.facilitaservicos.batepapo.dominio.enums;

/**
 * Enum que representa o status de uma sala de chat
 * 
 * @author Sistema de Migra√ß√£o R2DBC
 * @version 1.0
 * @since 2024
 */
public enum StatusSala {
    
    /**
     * Sala ativa e dispon√≠vel para uso
     */
    ATIVA("Ativa"),
    
    /**
     * Sala temporariamente inativa
     */
    INATIVA("Inativa"),
    
    /**
     * Sala em manuten√ß√£o
     */
    MANUTENCAO("Manuten√ß√£o"),
    
    /**
     * Sala arquivada (n√£o aceita novas mensagens)
     */
    ARQUIVADA("Arquivada"),
    
    /**
     * Sala suspensa por viola√ß√£o de regras
     */
    SUSPENSA("Suspensa"),
    
    /**
     * Sala exclu√≠da permanentemente
     */
    EXCLUIDA("Exclu√≠da");

    private final String descricao;

    StatusSala(String descricao) {
        this.descricao = descricao;
    }

    public String getDescricao() {
        return descricao;
    }

    /**
     * Verifica se a sala est√° dispon√≠vel para uso
     */
    public boolean isDisponivel() {
        return this == ATIVA;
    }

    /**
     * Verifica se usu√°rios podem entrar na sala
     */
    public boolean aceitaNovasConexoes() {
        return this == ATIVA;
    }

    /**
     * Verifica se a sala aceita novas mensagens
     */
    public boolean aceitaNovasMensagens() {
        return this == ATIVA;
    }

    /**
     * Verifica se a sala est√° temporariamente indispon√≠vel
     */
    public boolean isTemporariamenteIndisponivel() {
        return this == INATIVA || this == MANUTENCAO;
    }

    /**
     * Verifica se a sala est√° permanentemente indispon√≠vel
     */
    public boolean isPermanentementeIndisponivel() {
        return this == ARQUIVADA || this == SUSPENSA || this == EXCLUIDA;
    }

    /**
     * Verifica se a sala pode ser reativada
     */
    public boolean podeSerReativada() {
        return this == INATIVA || this == MANUTENCAO || this == SUSPENSA;
    }

    /**
     * Verifica se o hist√≥rico da sala est√° acess√≠vel
     */
    public boolean historicoAcessivel() {
        return this != EXCLUIDA;
    }

    /**
     * Verifica se a sala ainda aparece nas listagens
     */
    public boolean apareceNasListagens() {
        return this == ATIVA || this == INATIVA || this == MANUTENCAO;
    }

    /**
     * Obt√©m a cor/estilo para exibi√ß√£o do status
     */
    public String getCor() {
        return switch (this) {
            case ATIVA -> "success";
            case INATIVA -> "secondary";
            case MANUTENCAO -> "warning";
            case ARQUIVADA -> "info";
            case SUSPENSA -> "danger";
            case EXCLUIDA -> "dark";
        };
    }

    /**
     * Obt√©m o √≠cone para o status
     */
    public String getIcone() {
        return switch (this) {
            case ATIVA -> "üü¢";
            case INATIVA -> "‚ö´";
            case MANUTENCAO -> "üîß";
            case ARQUIVADA -> "üì¶";
            case SUSPENSA -> "‚õî";
            case EXCLUIDA -> "üóëÔ∏è";
        };
    }

    /**
     * Obt√©m a mensagem explicativa para o status
     */
    public String getMensagemStatus() {
        return switch (this) {
            case ATIVA -> "Sala funcionando normalmente";
            case INATIVA -> "Sala temporariamente desabilitada";
            case MANUTENCAO -> "Sala em manuten√ß√£o";
            case ARQUIVADA -> "Sala arquivada - somente leitura";
            case SUSPENSA -> "Sala suspensa por viola√ß√£o de regras";
            case EXCLUIDA -> "Sala exclu√≠da permanentemente";
        };
    }

    /**
     * Converte string para enum
     */
    public static StatusSala fromString(String status) {
        if (status == null || status.trim().isEmpty()) {
            return ATIVA;
        }
        
        try {
            return StatusSala.valueOf(status.trim().toUpperCase());
        } catch (IllegalArgumentException e) {
            return ATIVA;
        }
    }

    @Override
    public String toString() {
        return descricao;
    }
}