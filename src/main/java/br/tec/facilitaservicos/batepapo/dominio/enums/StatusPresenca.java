package br.tec.facilitaservicos.batepapo.dominio.enums;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Enum que representa o status de presen√ßa de um usu√°rio no chat
 * 
 * @author Sistema de Migra√ß√£o R2DBC
 * @version 1.0
 * @since 2024
 */
public enum StatusPresenca {
    
    /**
     * Usu√°rio ativo e online
     */
    @Schema(description = "Usu√°rio ativo e online")
    ONLINE("Online"),
    
    /**
     * Usu√°rio ausente/inativo mas ainda conectado
     */
    @Schema(description = "Usu√°rio ausente/inativo mas ainda conectado")
    AUSENTE("Ausente"),
    
    /**
     * Usu√°rio ocupado - n√£o quer ser incomodado
     */
    @Schema(description = "Usu√°rio ocupado - n√£o quer ser incomodado")
    OCUPADO("Ocupado"),
    
    /**
     * Usu√°rio invis√≠vel - aparece como offline para outros
     */
    @Schema(description = "Usu√°rio invis√≠vel - aparece como offline para outros")
    INVISIVEL("Invis√≠vel"),
    
    /**
     * Usu√°rio desconectado/offline
     */
    @Schema(description = "Usu√°rio desconectado/offline")
    OFFLINE("Offline"),
    
    /**
     * Conex√£o perdida/timeout
     */
    @Schema(description = "Conex√£o perdida/timeout")
    DESCONECTADO("Desconectado");

    private final String descricao;

    StatusPresenca(String descricao) {
        this.descricao = descricao;
    }

    public String getDescricao() {
        return descricao;
    }

    /**
     * Verifica se o usu√°rio est√° ativo
     */
    public boolean isAtivo() {
        return this == ONLINE;
    }

    /**
     * Verifica se o usu√°rio est√° conectado (mas pode estar inativo)
     */
    public boolean isConectado() {
        return this == ONLINE || this == AUSENTE || this == OCUPADO;
    }

    /**
     * Verifica se o usu√°rio est√° vis√≠vel para outros
     */
    public boolean isVisivel() {
        return this != INVISIVEL && this != OFFLINE && this != DESCONECTADO;
    }

    /**
     * Verifica se o usu√°rio pode receber mensagens
     */
    public boolean podeReceberMensagens() {
        return this == ONLINE || this == AUSENTE;
    }

    /**
     * Verifica se o usu√°rio deve receber notifica√ß√µes
     */
    public boolean deveReceberNotificacoes() {
        return this == ONLINE || this == AUSENTE;
    }

    /**
     * Verifica se o status indica problemas de conex√£o
     */
    public boolean temProblemaConexao() {
        return this == DESCONECTADO;
    }

    /**
     * Obt√©m a cor/estilo para exibi√ß√£o do status
     */
    public String getCor() {
        return switch (this) {
            case ONLINE -> "success";
            case AUSENTE -> "warning";
            case OCUPADO -> "danger";
            case INVISIVEL -> "secondary";
            case OFFLINE, DESCONECTADO -> "muted";
        };
    }

    /**
     * Obt√©m o √≠cone para o status de presen√ßa
     */
    public String getIcone() {
        return switch (this) {
            case ONLINE -> "üü¢";
            case AUSENTE -> "üü°";
            case OCUPADO -> "üî¥";
            case INVISIVEL -> "üëª";
            case OFFLINE -> "‚ö´";
            case DESCONECTADO -> "‚ùå";
        };
    }

    /**
     * Obt√©m a descri√ß√£o estendida do status
     */
    public String getDescricaoEstendida() {
        return switch (this) {
            case ONLINE -> "Dispon√≠vel para chat";
            case AUSENTE -> "Temporariamente ausente";
            case OCUPADO -> "Ocupado - n√£o incomodar";
            case INVISIVEL -> "Aparece como offline";
            case OFFLINE -> "N√£o est√° conectado";
            case DESCONECTADO -> "Perdeu a conex√£o";
        };
    }

    /**
     * Prioridade de exibi√ß√£o na lista de usu√°rios (menor = mais priorit√°rio)
     */
    public int getPrioridadeExibicao() {
        return switch (this) {
            case ONLINE -> 1;
            case OCUPADO -> 2;
            case AUSENTE -> 3;
            case INVISIVEL -> 4;
            case OFFLINE -> 5;
            case DESCONECTADO -> 6;
        };
    }

    /**
     * Verifica se o status √© v√°lido para transi√ß√£o
     */
    public boolean podeTransicionarPara(StatusPresenca novoStatus) {
        // Qualquer status pode ir para OFFLINE ou DESCONECTADO
        if (novoStatus == OFFLINE || novoStatus == DESCONECTADO) {
            return true;
        }
        
        // OFFLINE s√≥ pode ir para ONLINE
        if (this == OFFLINE) {
            return novoStatus == ONLINE;
        }
        
        // DESCONECTADO s√≥ pode ir para ONLINE
        if (this == DESCONECTADO) {
            return novoStatus == ONLINE;
        }
        
        // Outros status podem transicionar entre si
        return true;
    }

    /**
     * Converte string para enum
     */
    public static StatusPresenca fromString(String status) {
        if (status == null || status.trim().isEmpty()) {
            return ONLINE;
        }
        
        try {
            return StatusPresenca.valueOf(status.trim().toUpperCase());
        } catch (IllegalArgumentException e) {
            return ONLINE;
        }
    }

    @Override
    public String toString() {
        return descricao;
    }
}