package br.tec.facilitaservicos.batepapo.apresentacao.dto;

import java.time.LocalDateTime;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;

import br.tec.facilitaservicos.batepapo.dominio.enums.StatusSala;
import br.tec.facilitaservicos.batepapo.dominio.enums.TipoSala;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

/**
 * DTO reativo para Sala de Chat.
 * 
 * Representa uma sala de bate-papo com todas as informa√ß√µes
 * necess√°rias para gerenciamento, controle de acesso e
 * monitoramento de atividades em tempo real.
 * 
 * Principais casos de uso:
 * - Cria√ß√£o e configura√ß√£o de salas de chat
 * - Controle de acesso e limites de usu√°rios
 * - Monitoramento de atividade e estat√≠sticas
 * - Modera√ß√£o e administra√ß√£o de salas
 * 
 * Funcionalidades suportadas:
 * - Diferentes tipos de sala (p√∫blica, privada, moderada)
 * - Controle de capacidade m√°xima de usu√°rios
 * - Sistema de modera√ß√£o com permiss√µes
 * - Rastreamento de atividade em tempo real
 * - Estat√≠sticas de uso e engagement
 * 
 * Restri√ß√µes de neg√≥cio:
 * - Nome da sala limitado a 50 caracteres
 * - Descri√ß√£o limitada a 200 caracteres
 * - Capacidade m√°xima varia por tipo de sala
 * - Apenas criador e moderadores podem alterar configura√ß√µes
 * - Salas inativas s√£o automaticamente arquivadas
 * 
 * Relacionamentos:
 * - Conecta com microservi√ßo de usu√°rios para valida√ß√£o
 * - Integra com sistema de permiss√µes para modera√ß√£o
 * - Vincula com mensagens para estat√≠sticas
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Schema(description = "Sala de bate-papo com configura√ß√µes e estat√≠sticas de atividade")
public record SalaDto(
    @Schema(description = "Identificador √∫nico da sala", 
            example = "42")
    Long id,
    
    @Schema(description = "Nome da sala de chat", 
            example = "Sala Geral",
            required = true,
            maxLength = 50)
    @NotBlank(message = "Nome da sala √© obrigat√≥rio")
    @Size(max = 50, message = "Nome da sala n√£o pode exceder 50 caracteres")
    String nome,
    
    @Schema(description = "Descri√ß√£o detalhada sobre o prop√≥sito da sala", 
            example = "Espa√ßo para conversas gerais e apresenta√ß√µes",
            maxLength = 200)
    @Size(max = 200, message = "Descri√ß√£o n√£o pode exceder 200 caracteres")
    String descricao,
    
    @Schema(description = "Tipo da sala que define suas caracter√≠sticas", 
            example = "PUBLICA",
            allowableValues = {"PUBLICA", "PRIVADA", "MODERADA", "VIP", "TEMPORARIA"},
            required = true)
    @NotNull(message = "Tipo da sala √© obrigat√≥rio")
    TipoSala tipo,
    
    @Schema(description = "Status atual da sala", 
            example = "ATIVA",
            allowableValues = {"ATIVA", "INATIVA", "ARQUIVADA", "MANUTENCAO"})
    StatusSala status,
    
    @Schema(description = "N√∫mero m√°ximo de usu√°rios permitidos simultaneamente", 
            example = "100",
            minimum = "1")
    Integer maxUsuarios,
    
    @Schema(description = "Indica se a sala possui modera√ß√£o ativa", 
            example = "false")
    Boolean moderada,
    
    @Schema(description = "N√∫mero atual de usu√°rios conectados √† sala", 
            example = "23",
            minimum = "0")
    Integer usuariosOnline,
    
    @Schema(description = "Total de mensagens enviadas nesta sala", 
            example = "1847",
            minimum = "0")
    Long totalMensagens,
    
    @Schema(description = "Identificador do usu√°rio que criou a sala", 
            example = "12345")
    Long criadaPor,
    
    @Schema(description = "Data e hora da √∫ltima atividade na sala", 
            example = "2025-09-01T16:45:30")
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    LocalDateTime ultimaAtividade,
    
    @Schema(description = "Data e hora de cria√ß√£o da sala", 
            example = "2025-08-15T10:20:00")
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    LocalDateTime dataCriacao
) {
    
    /**
     * Cria DTO com dados b√°sicos para cria√ß√£o
     */
    public static SalaDto paraCriacao(String nome, String descricao, TipoSala tipo, Long criadaPor) {
        return new SalaDto(
            null, nome, descricao, tipo, StatusSala.ATIVA, 
            tipo.getMaxUsuariosPadrao(), false, 0, 0L, criadaPor,
            LocalDateTime.now(), LocalDateTime.now()
        );
    }
    
    /**
     * Cria DTO completo
     */
    public static SalaDto completa(Long id, String nome, String descricao, TipoSala tipo, 
                                  StatusSala status, Integer maxUsuarios, Boolean moderada,
                                  Integer usuariosOnline, Long totalMensagens, Long criadaPor,
                                  LocalDateTime ultimaAtividade, LocalDateTime dataCriacao) {
        return new SalaDto(id, nome, descricao, tipo, status, maxUsuarios, moderada,
                          usuariosOnline, totalMensagens, criadaPor, ultimaAtividade, dataCriacao);
    }
    
    /**
     * Verifica se a sala est√° ativa
     */
    public boolean isAtiva() {
        return status == StatusSala.ATIVA;
    }
    
    /**
     * Verifica se a sala √© p√∫blica
     */
    public boolean isPublica() {
        return tipo != null && tipo.isAcessoLivre();
    }
    
    /**
     * Verifica se a sala √© moderada
     */
    public boolean isModerada() {
        return Boolean.TRUE.equals(moderada);
    }
    
    /**
     * Verifica se a sala est√° cheia
     */
    public boolean isCheia() {
        return usuariosOnline != null && maxUsuarios != null && 
               usuariosOnline >= maxUsuarios;
    }
    
    /**
     * Verifica se a sala teve atividade recente
     */
    public boolean temAtividadeRecente() {
        return ultimaAtividade != null && 
               ultimaAtividade.isAfter(LocalDateTime.now().minusMinutes(30));
    }
    
    /**
     * Calcula percentual de ocupa√ß√£o
     */
    public double getPercentualOcupacao() {
        if (maxUsuarios == null || maxUsuarios == 0) {
            return 0.0;
        }
        return ((double) (usuariosOnline != null ? usuariosOnline : 0) / maxUsuarios) * 100.0;
    }
    
    /**
     * Obt√©m √≠cone do tipo de sala
     */
    public String getIconeTipo() {
        return tipo != null ? tipo.getIcone() : "üí¨";
    }
    
    /**
     * Obt√©m √≠cone do status da sala
     */
    public String getIconeStatus() {
        return status != null ? status.getIcone() : "üü¢";
    }
    
    /**
     * Obt√©m cor/tema da sala
     */
    public String getCor() {
        return tipo != null ? tipo.getCor() : "primary";
    }
    
    /**
     * Verifica se pode aceitar novos usu√°rios
     */
    public boolean podeAceitarNovoUsuario() {
        return isAtiva() && !isCheia();
    }
}