# =============================================================================
# CONFIGURAÇÃO AZURE KEY VAULT - BATE-PAPO MICROSERVICE
# =============================================================================
# Microserviço responsável pelo sistema de chat e comunicação em tempo real
# Segredos necessários: JWT (consumo), Database (compartilhado)
# =============================================================================

spring:
  config:
    activate:
      on-profile: azure
    import:
      - "optional:configtree:/run/secrets/"

  # ===== SPRING CLOUD AZURE - DISABLED FOR CONFIGTREE =====
  cloud:
    azure:
      keyvault:
        secret:
          enabled: false  # Usando configtree para maior segurança

  # ===== DATABASE CONFIGURATION =====
  datasource:
    url: ${DB_URL:jdbc:mysql://conexao-mysql:3306/conexao_de_sorte?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=America/Sao_Paulo}
    username: ${DB_USER:chat_user}
    password: ${DB_PASSWORD:}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 15
      minimum-idle: 5
      connection-timeout: 30000

  # ===== JPA CONFIGURATION =====
  jpa:
    hibernate:
      ddl-auto: validate
    database-platform: org.hibernate.dialect.MySQL8Dialect
    show-sql: false

# ===== MICROSERVICE SPECIFIC CONFIG =====
app:
  microservice:
    name: batepapo
    version: @project.version@
    description: "Microserviço de chat e comunicação em tempo real"
  
  # JWT Configuration - CONSUMO APENAS (via configtree)
  jwt:
    # Configuração para validação de tokens recebidos via WebSocket
    signing-key: ${JWT_SIGNING_KEY:}
    verification-key: ${JWT_VERIFICATION_KEY:}
    key-id: ${JWT_KEY_ID:}
    secret: ${JWT_SECRET:}
    issuer: https://conexaodesorte.com.br
    audience: conexao-de-sorte-frontend-app
    algorithm: RS256
    validation:
      enabled: true
      strict-mode: true
      websocket-enabled: true  # Específico para chat

  # Chat Configuration - ESPECIALIDADE DESTE MICROSERVIÇO
  chat:
    # WebSocket
    websocket:
      allowed-origins: 
        - https://conexaodesorte.com.br
        - https://www.conexaodesorte.com.br
      endpoint: /ws/chat
      message-size-limit: 1024  # 1KB por mensagem
      buffer-size: 8192
      
    # Salas de chat
    rooms:
      default: general
      max-users-per-room: 100
      auto-create: true
      inactive-timeout: PT2H
      
    # Moderação
    moderation:
      enabled: true
      profanity-filter: true
      spam-detection: true
      rate-limit:
        messages-per-minute: 30
        warnings-before-timeout: 3
        timeout-duration: PT10M
      
    # Histórico
    history:
      enabled: true
      retention-days: 30
      max-messages-per-room: 10000
      
    # Notificações
    notifications:
      mention-enabled: true
      private-message-enabled: true
      join-leave-enabled: false

  # Redis para sessões WebSocket e cache
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DB:1}  # DB 1 para batepapo
      timeout: 2000ms
      lettuce:
        pool:
          enabled: true
          max-active: 20  # Chat precisa de mais conexões simultâneas
          max-idle: 8
          min-idle: 2     # Manter conexões mínimas ativas
          max-wait: 3000ms

# ===== WEBSOCKET CONFIGURATION =====
websocket:
  stomp:
    relay:
      enabled: false  # Usando in-memory broker por enquanto
    heartbeat:
      client: 10000
      server: 10000
  sockjs:
    enabled: true
    heartbeat: 25000

# ===== LOGGING =====
logging:
  level:
    '[com.azure]': INFO
    '[com.azure.security.keyvault]': INFO
    '[org.springframework.cloud.azure]': INFO
    '[org.springframework.websocket]': DEBUG
    '[org.springframework.messaging]': DEBUG
    '[br.tec.facilitaservicos.batepapo]': DEBUG

# ===== MANAGEMENT ENDPOINTS - HARDENED =====
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,websocket
      exclude: env,configprops,beans,conditions,mappings,threaddump,heapdump,startup
  endpoint:
    health:
      show-details: when_authorized
      roles: ADMIN
    info:
      enabled: true
    env:
      enabled: false
    configprops:
      enabled: false
    beans:
      enabled: false
    conditions:
      enabled: false
    mappings:
      enabled: false
    threaddump:
      enabled: false
    heapdump:
      enabled: false
    startup:
      enabled: false
  health:
    db:
      enabled: true
    redis:
      enabled: true
    websocket:
      enabled: true

# ===== SECURITY AUDIT LOGGING =====
security:
  audit:
    enabled: true
    include-request-details: true
    include-client-info: true
    log-authentication-success: true
    log-authentication-failure: true
    log-authorization-failure: true
    websocket-authentication: true  # Log WebSocket auth events

# ===== SERVER CONFIGURATION =====
server:
  port: ${SERVER_PORT:8083}
  servlet:
    context-path: /api/v1/chat
  compression:
    enabled: true
  http2:
    enabled: true
  # Configuração específica para WebSocket
  max-http-header-size: 16384